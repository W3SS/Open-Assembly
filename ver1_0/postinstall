#!/bin/sh
#python waitfordb.py
#python openassembly/manage.py syncdb --noinput
#mkdir -p /home/dotcloud/data/media /home/dotcloud/data/static
#python openassembly/manage.py collectstatic --noinput

app_name=openassembly
data_dir=$HOME/data

dotcloud_get_env() {
    sed -n '/SERVICE_NAME/ s/.*: "\(.*\)".*/\1/p' < "$HOME/environment.json"
}

setup_django() {
    # Create the data directories on the first push:
    if [ ! -d $data_dir/static ] ; then
        mkdir -p $ $data_dir/static
    fi

    if [ ! -d $data_dir/media ] ; then
        mkdir -p $ $data_dir/media
    fi

    python $app_name/manage.py collectstatic --noinput
    python waitfordb.py
    python $app_name/manage.py syncdb --noinput
    python $app_name/manage.py rebuild_index --noinput
    crontab /home/dotcloud/current/jobs/crontab
}

setup_django_celery() {
    cat > $HOME/current/supervisord.conf << EOF
[program:djcelery]
directory = $HOME/current/
command = python $app_name/manage.py celeryd -E -l INFO -c 2
stderr_logfile = /var/log/supervisor/%(program_name)s_error.log
stdout_logfile = /var/log/supervisor/%(program_name)s.log

[program:celerycam]
directory = $HOME/current/
command = python $app_name/manage.py celerycam
stderr_logfile = /var/log/supervisor/%(program_name)s_error.log
stdout_logfile = /var/log/supervisor/%(program_name)s.log
EOF
}

if [ `dotcloud_get_env SERVICE_NAME` = worker ] ; then
    setup_django_celery
else
    setup_django
fi